/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarketFactory {
  export type MarketDetailsStruct = {
    sku: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    predictionPrice: PromiseOrValue<BigNumberish>;
    closingDate: PromiseOrValue<BigNumberish>;
  };

  export type MarketDetailsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    sku: string;
    name: string;
    market: string;
    predictionPrice: BigNumber;
    closingDate: BigNumber;
  };
}

export interface MarketFactoryInterface extends utils.Interface {
  functions: {
    "allMarkets(uint256)": FunctionFragment;
    "createNewMarket(string,uint256,address,uint256,address,string,string)": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAllMarketswSku()": FunctionFragment;
    "getMarket(string,uint256,uint256)": FunctionFragment;
    "markets(bytes32)": FunctionFragment;
    "mktDtlArray(uint256)": FunctionFragment;
    "mktInfo()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allMarkets"
      | "createNewMarket"
      | "getAllMarkets"
      | "getAllMarketswSku"
      | "getMarket"
      | "markets"
      | "mktDtlArray"
      | "mktInfo"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarketswSku",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mktDtlArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "mktInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarketswSku",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mktDtlArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mktInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "marketCreated(string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "marketCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface marketCreatedEventObject {
  sku: string;
  _predictionPrice: BigNumber;
  closingDate: BigNumber;
}
export type marketCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  marketCreatedEventObject
>;

export type marketCreatedEventFilter = TypedEventFilter<marketCreatedEvent>;

export interface MarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createNewMarket(
      uri: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      _oracleFeed: PromiseOrValue<string>,
      _closingDate: PromiseOrValue<BigNumberish>,
      stable: PromiseOrValue<string>,
      _sku: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { valid: string[] }>;

    getAllMarketswSku(
      overrides?: CallOverrides
    ): Promise<
      [MarketFactory.MarketDetailsStructOutput[]] & {
        valid: MarketFactory.MarketDetailsStructOutput[];
      }
    >;

    getMarket(
      sku: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      closingDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    markets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mktDtlArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        sku: string;
        name: string;
        market: string;
        predictionPrice: BigNumber;
        closingDate: BigNumber;
      }
    >;

    mktInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        sku: string;
        name: string;
        market: string;
        predictionPrice: BigNumber;
        closingDate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allMarkets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createNewMarket(
    uri: PromiseOrValue<string>,
    _predictionPrice: PromiseOrValue<BigNumberish>,
    _oracleFeed: PromiseOrValue<string>,
    _closingDate: PromiseOrValue<BigNumberish>,
    stable: PromiseOrValue<string>,
    _sku: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAllMarketswSku(
    overrides?: CallOverrides
  ): Promise<MarketFactory.MarketDetailsStructOutput[]>;

  getMarket(
    sku: PromiseOrValue<string>,
    _predictionPrice: PromiseOrValue<BigNumberish>,
    closingDate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  markets(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  mktDtlArray(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      sku: string;
      name: string;
      market: string;
      predictionPrice: BigNumber;
      closingDate: BigNumber;
    }
  >;

  mktInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      sku: string;
      name: string;
      market: string;
      predictionPrice: BigNumber;
      closingDate: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createNewMarket(
      uri: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      _oracleFeed: PromiseOrValue<string>,
      _closingDate: PromiseOrValue<BigNumberish>,
      stable: PromiseOrValue<string>,
      _sku: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAllMarketswSku(
      overrides?: CallOverrides
    ): Promise<MarketFactory.MarketDetailsStructOutput[]>;

    getMarket(
      sku: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      closingDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    markets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    mktDtlArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        sku: string;
        name: string;
        market: string;
        predictionPrice: BigNumber;
        closingDate: BigNumber;
      }
    >;

    mktInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        sku: string;
        name: string;
        market: string;
        predictionPrice: BigNumber;
        closingDate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "marketCreated(string,uint256,uint256)"(
      sku?: null,
      _predictionPrice?: null,
      closingDate?: null
    ): marketCreatedEventFilter;
    marketCreated(
      sku?: null,
      _predictionPrice?: null,
      closingDate?: null
    ): marketCreatedEventFilter;
  };

  estimateGas: {
    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewMarket(
      uri: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      _oracleFeed: PromiseOrValue<string>,
      _closingDate: PromiseOrValue<BigNumberish>,
      stable: PromiseOrValue<string>,
      _sku: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarketswSku(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      sku: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      closingDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mktDtlArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mktInfo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewMarket(
      uri: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      _oracleFeed: PromiseOrValue<string>,
      _closingDate: PromiseOrValue<BigNumberish>,
      stable: PromiseOrValue<string>,
      _sku: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarketswSku(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(
      sku: PromiseOrValue<string>,
      _predictionPrice: PromiseOrValue<BigNumberish>,
      closingDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mktDtlArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mktInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
